import os
import logging
import asyncio
from requests.exceptions import HTTPError
from aiogram import types, Dispatcher

from app.payments import create_invoice    # sync
from app.keyboards import main_menu, plans_menu

logger = logging.getLogger("handlers")

# –¢–∞—Ä–∏—Ñ—ã: callback_data -> (–Ω–∞–∑–≤–∞–Ω–∏–µ, —Å—É–º–º–∞, –¥–Ω–∏)
PLAN_MAP = {
    'plan_week':  ('–ù–µ–¥–µ–ª—è', 100.0, 7),
    'plan_month': ('–ú–µ—Å—è—Ü', 300.0, 30),
    'plan_chat':  ('–ß–∞—Ç',   50.0, 1),
}

BASE_URL = os.getenv('BASE_URL', '')


def register_handlers(dp: Dispatcher):
    # /start
    dp.register_message_handler(cmd_start, commands=['start'])

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏!)
    dp.register_callback_query_handler(cb_buy,      lambda c: c.data == 'buy')
    dp.register_callback_query_handler(cb_back,     lambda c: c.data == 'back')
    dp.register_callback_query_handler(cb_my_subs,  lambda c: c.data == 'my_subs')
    dp.register_callback_query_handler(cb_bonuses,  lambda c: c.data == 'bonuses')
    dp.register_callback_query_handler(cb_help,     lambda c: c.data == 'help')

    # –í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞
    dp.register_callback_query_handler(process_plan, lambda c: (c.data or "") in PLAN_MAP)

    # –û–±—â–∏–π –ª–æ–≥ –æ—à–∏–±–æ–∫
    @dp.errors_handler()
    async def _errors(update, error):
        logger.exception("Handler error: %r on %r", error, update)
        return True


async def cmd_start(message: types.Message):
    logger.info("cmd_start chat_id=%s", message.chat.id)
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())


# ====== callbacks –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ======

async def cb_buy(callback: types.CallbackQuery):
    await callback.answer()  # –±—ã—Å—Ç—Ä–æ —É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏"
    logger.info("cb_buy from user=%s", callback.from_user.id)
    # —á—Ç–æ–±—ã –Ω–µ –ø–ª–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:", reply_markup=plans_menu())


async def cb_back(callback: types.CallbackQuery):
    await callback.answer()
    logger.info("cb_back from user=%s", callback.from_user.id)
    await callback.message.edit_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())


async def cb_my_subs(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer("–ó–¥–µ—Å—å –±—É–¥—É—Ç –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ üôÇ")


async def cb_bonuses(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer("–ó–¥–µ—Å—å –±—É–¥—É—Ç –±–æ–Ω—É—Å—ã üéÅ")


async def cb_help(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer("–ü–æ–º–æ—â—å: –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º @support ...")


# ====== –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤ ======

# –æ–±—ë—Ä—Ç–∫–∞, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å event loop –ø—Ä–∏ sync requests
async def _create_invoice_async(*args, **kwargs):
    loop = asyncio.get_running_loop()
    return await loop.run_in_executor(None, lambda: create_invoice(*args, **kwargs))

async def process_plan(callback: types.CallbackQuery):
    await callback.answer()
    data = callback.data or ""
    logger.info("process_plan user=%s data=%r", callback.from_user.id, data)

    name, amount, days = PLAN_MAP[data]
    try:
        invoice = await _create_invoice_async(
            user_id=callback.from_user.id,
            amount=amount,
            plan=name,
            base_url=BASE_URL
        )
        pay_url = (invoice or {}).get("url")
        if not pay_url:
            raise ValueError("Empty pay url in invoice")
    except HTTPError as e:
        logger.warning("create_invoice HTTPError: %s", e, exc_info=True)
        if getattr(e, "response", None) and e.response.status_code == 401:
            pay_url = f"{BASE_URL}/testpay?user_id={callback.from_user.id}&plan={name}"
        else:
            await callback.message.answer("‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
    except Exception as e:
        logger.exception("create_invoice failed: %s", e)
        await callback.message.answer("‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    await callback.message.answer(f"–°—á—ë—Ç –Ω–∞ {amount:.0f}‚ÇΩ:\n{pay_url}")
