from aiogram import types
from aiogram.dispatcher import Dispatcher
from requests.exceptions import HTTPError
import logging

from app.payments import create_invoice
from app.keyboards import main_menu, plans_menu
from app.config import BASE_URL, PLAN_MAP  # –∏–ª–∏ –∫–∞–∫ —É –≤–∞—Å —Ö—Ä–∞–Ω—è—Ç—Å—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã

def register_handlers(dp: Dispatcher):
    dp.register_message_handler(cmd_start, commands=['start'])
    dp.register_message_handler(show_plans, text='üí≥ –ö—É–ø–∏—Ç—å')
    dp.register_callback_query_handler(process_plan, lambda c: c.data.startswith('plan_'))
    # ‚Ä¶ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ‚Ä¶

async def cmd_start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_menu())

async def show_plans(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=plans_menu())

async def process_plan(callback: types.CallbackQuery):
    name, amount, days = PLAN_MAP[callback.data]
    try:
        invoice = create_invoice(
            user_id=callback.from_user.id,
            amount=amount,
            plan=name,
            base_url=BASE_URL
        )
        pay_url = invoice.get("url")
    except HTTPError as e:
        if e.response.status_code == 401:
            pay_url = f"{BASE_URL}/testpay?user_id={callback.from_user.id}&plan={name}"
        else:
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞")
            await callback.message.answer("‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

    await callback.message.answer(f"–°—á—ë—Ç –Ω–∞ {amount}‚ÇΩ: {pay_url}")
    await callback.answer()
