# app/handlers.py
import os
import logging
from datetime import datetime
from requests.exceptions import HTTPError

from aiogram import types, Dispatcher
from app.payments import create_invoice
from app.keyboards import main_menu, plans_menu
from app.models import SessionLocal, Subscription

log = logging.getLogger("handlers")

PLAN_MAP = {
    "plan_week":   ("–ù–µ–¥–µ–ª—è", 100.0, 7),
    "plan_month":  ("–ú–µ—Å—è—Ü",  300.0, 30),
    "plan_chat":   ("–ß–∞—Ç",     50.0, 1),
    "plan_test1m": ("–¢–µ—Å—Ç1–º",   1.0, 0),
}

APP_BASE_URL  = os.getenv("APP_BASE_URL", os.getenv("BASE_URL", "")).rstrip("/")
ADMIN_CONTACT = os.getenv("ADMIN_CONTACT", "@YourAdmin")
CLUB_NAME     = os.getenv("CLUB_NAME", "FOOT SECRET CLUB")  # –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª—É–±–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞


def _admin_contact_text() -> str:
    # –ï—Å–ª–∏ –¥–∞–ª–∏ —Å—Å—ã–ª–∫—É ‚Äî –¥–µ–ª–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π; –µ—Å–ª–∏ @username ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if ADMIN_CONTACT.startswith("http"):
        return f'<a href="{ADMIN_CONTACT}">{ADMIN_CONTACT}</a>'
    return ADMIN_CONTACT


def _welcome_text() -> str:
    # HTML‚Äë–≤–µ—Ä—Å—Ç–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    return (
        f'üî• <b>–î–û–ë–†–û –ü–û–ñ–ê–õ–û–í–ê–¢–¨ –í ¬´[ {CLUB_NAME} ]¬ª!</b> üî•\n'
        f'<i>(–¢–≤–æ–π –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π —Å–µ—Ä–∏–∞–ª, –≥–¥–µ –≥–ª–∞–≤–Ω—ã–µ —Ä–æ–ª–∏ –∏–≥—Ä–∞—é—Ç‚Ä¶ –Ω–æ–∂–∫–∏‚Ä¶)</i>\n\n'
        '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –Ω–æ–≤—ã–π ¬´—ç–ø–∏–∑–æ–¥¬ª —Å –¥–µ—Ä–∑–∫–∏–º–∏ —Ñ–æ—Ç–æ –∏ –¥—Ä–∞–∑–Ω—è—â–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏. '
        '–¢—ã —É–∑–Ω–∞–µ—à—å —Ç–∞–π–Ω—ã —ç—Ç–∏—Ö –ø—è—Ç–æ—á–µ–∫, –ø–æ—á—É–≤—Å—Ç–≤—É–µ—à—å –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –≤ –∫–∞–∂–¥–æ–º –∫–∞–¥—Ä–µ‚Ä¶ –∏ –∑–∞—Ö–æ—á–µ—à—å ¬´–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è¬ª.\n\n'
        '‚Ä¢ üì∏ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ ‚Äî –±—É–¥—Ç–æ –∫–∞–¥—Ä—ã –∏–∑ —ç—Ä–æ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç—Ä–∏–ª–ª–µ—Ä–∞.\n'
        '‚Ä¢ üìñ –°–æ—á–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∏ ‚Äî –º–∏–Ω–∏‚Äë–∏—Å—Ç–æ—Ä–∏–∏, –Ω–∞–º—ë–∫–∏, –∏–Ω—Ç—Ä–∏–≥–∞‚Ä¶\n'
        '‚Ä¢ ‚è≥ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ ¬´–≤—ã–ø—É—Å–∫–∏¬ª ‚Äî –ø–æ–¥–ø–∏—à–∏—Å—å, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ä–∞–∑–≤—è–∑–∫—É!\n\n'
        f'üíå –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã ‚Äî –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö (–ø–∏—à–∏ –≤ –õ–° { _admin_contact_text() } üëÄ)'
    )


def register_handlers(dp: Dispatcher):
    dp.register_message_handler(cmd_start, commands=['start'])

    dp.register_callback_query_handler(cb_buy,      lambda c: c.data == 'buy')
    dp.register_callback_query_handler(cb_my_subs,  lambda c: c.data == 'my_subs')
    dp.register_callback_query_handler(cb_bonuses,  lambda c: c.data == 'bonuses')
    dp.register_callback_query_handler(cb_help,     lambda c: c.data == 'help')
    dp.register_callback_query_handler(cb_back,     lambda c: c.data == 'back')

    dp.register_callback_query_handler(process_plan, lambda c: c.data in PLAN_MAP)


async def cmd_start(message: types.Message):
    log.info("cmd_start chat_id=%s", message.chat.id)
    await message.answer(_welcome_text(), reply_markup=main_menu(), parse_mode="HTML")


async def cb_buy(callback: types.CallbackQuery):
    log.info("cb_buy from user=%s", callback.from_user.id)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:", reply_markup=plans_menu())
    await callback.answer()


async def cb_my_subs(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ/–∏—Å—Ç—ë–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    log.info("cb_my_subs from user=%s", callback.from_user.id)
    session = SessionLocal()
    try:
        now = datetime.utcnow()
        subs = (
            session.query(Subscription)
            .filter(Subscription.user_id == callback.from_user.id)
            .order_by(Subscription.expires_at.desc())
            .all()
        )

        if not subs:
            text = "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫."
        else:
            lines = []
            for sub in subs:
                status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if sub.expires_at > now else "‚è∞ –ò—Å—Ç–µ–∫–ª–∞"
                lines.append(f"‚Ä¢ {sub.plan} ‚Äî –¥–æ {sub.expires_at:%d.%m.%Y %H:%M} UTC ({status})")
            text = "–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n\n" + "\n".join(lines)

        await callback.message.edit_text(text, reply_markup=main_menu())
    except Exception:
        log.exception("Failed to fetch subscriptions for user=%s", callback.from_user.id)
        await callback.message.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö.", reply_markup=main_menu())
    finally:
        session.close()
    await callback.answer()


async def cb_bonuses(callback: types.CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∞ –ø–æ–¥ –±–æ–Ω—É—Å—ã/–∞–∫—Ü–∏–∏ ‚Äî –º–æ–∂–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è."""
    text = (
        "üéÅ <b>–ë–æ–Ω—É—Å—ã –∏ –∞–∫—Ü–∏–∏</b>\n\n"
        "‚Äî –ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ +1 –¥–µ–Ω—å –∫ –ø–æ–¥–ø–∏—Å–∫–µ.\n"
        "‚Äî –°–∫–∏–¥–∫–∞ 50% –Ω–∞ –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É <b>FIRST50</b>).\n\n"
        "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: " + _admin_contact_text()
    )
    await callback.message.edit_text(text, reply_markup=main_menu(), parse_mode="HTML")
    await callback.answer()


async def cb_help(callback: types.CallbackQuery):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–º–æ—â–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    log.info("cb_help from user=%s", callback.from_user.id)
    text = (
        "üÜò <b>–ü–æ–º–æ—â—å</b>\n\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–ø–∏—Å–∫–æ–π, –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n"
        f"{_admin_contact_text()}"
    )
    await callback.message.edit_text(text, reply_markup=main_menu(), parse_mode="HTML")
    await callback.answer()


async def cb_back(callback: types.CallbackQuery):
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    await callback.answer()


# ----- –æ–ø–ª–∞—Ç–∞ -----
async def _create_invoice_async(*args, **kwargs):
    import asyncio
    loop = asyncio.get_running_loop()
    return await loop.run_in_executor(None, lambda: create_invoice(*args, **kwargs))


async def process_plan(callback: types.CallbackQuery):
    name, amount, _days = PLAN_MAP[callback.data]
    log.info("process_plan user=%s data=%r", callback.from_user.id, callback.data)

    order_id = f"tg-{callback.from_user.id}-{callback.id}"
    success_url = f"{APP_BASE_URL}/paid/success" if APP_BASE_URL else None
    fail_url    = f"{APP_BASE_URL}/paid/fail"    if APP_BASE_URL else None

    try:
        invoice = await _create_invoice_async(
            user_id=callback.from_user.id,
            amount=amount,
            plan=name,
            success_url=success_url,
            fail_url=fail_url,
            order_id=order_id,
        )
        pay_url = invoice.get("url")
    except HTTPError as e:
        log.warning("create_invoice HTTPError: %s", e, exc_info=True)
        await callback.message.answer("‚ùóÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á—ë—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ.")
        await callback.answer(); return
    except Exception as e:
        log.exception("create_invoice failed: %s", e)
        await callback.message.answer("‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞.")
        await callback.answer(); return

    if not pay_url:
        await callback.message.answer("‚ùóÔ∏è –ü–ª–∞—Ç—ë–∂–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞.")
        await callback.answer(); return

    await callback.message.answer(f"–°—á—ë—Ç –Ω–∞ {amount:.2f}‚ÇΩ:\n{pay_url}")
    await callback.answer()
